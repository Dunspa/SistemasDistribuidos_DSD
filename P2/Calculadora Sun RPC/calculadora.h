/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CALCULADORA_H_RPCGEN
#define _CALCULADORA_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	u_int vec_len;
	double *vec_val;
} vec;

typedef struct {
	u_int polinomio_len;
	struct operacion *polinomio_val;
} polinomio;

struct operacion {
	double val;
	char op_izq;
	char op_dcha;
};
typedef struct operacion operacion;

struct calculadora_res {
	int err;
	union {
		double resultado;
	} calculadora_res_u;
};
typedef struct calculadora_res calculadora_res;

struct calculadora_res_vec {
	int err;
	union {
		vec resultado;
	} calculadora_res_vec_u;
};
typedef struct calculadora_res_vec calculadora_res_vec;

struct suma_1_argument {
	double arg1;
	double arg2;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	double arg1;
	double arg2;
};
typedef struct resta_1_argument resta_1_argument;

struct multiplicacion_1_argument {
	double arg1;
	double arg2;
};
typedef struct multiplicacion_1_argument multiplicacion_1_argument;

struct division_1_argument {
	double arg1;
	double arg2;
};
typedef struct division_1_argument division_1_argument;

struct sumavec_1_argument {
	vec arg1;
	vec arg2;
};
typedef struct sumavec_1_argument sumavec_1_argument;

struct restavec_1_argument {
	vec arg1;
	vec arg2;
};
typedef struct restavec_1_argument restavec_1_argument;

struct multiplicacionvec_1_argument {
	vec arg1;
	vec arg2;
};
typedef struct multiplicacionvec_1_argument multiplicacionvec_1_argument;

struct multiplicacionvec_esc_1_argument {
	vec arg1;
	double arg2;
};
typedef struct multiplicacionvec_esc_1_argument multiplicacionvec_esc_1_argument;

#define CALCPROG 0x20000001
#define CALCVER 1

#if defined(__STDC__) || defined(__cplusplus)
#define SUMA 1
extern  calculadora_res * suma_1(double , double , CLIENT *);
extern  calculadora_res * suma_1_svc(double , double , struct svc_req *);
#define RESTA 2
extern  calculadora_res * resta_1(double , double , CLIENT *);
extern  calculadora_res * resta_1_svc(double , double , struct svc_req *);
#define MULTIPLICACION 3
extern  calculadora_res * multiplicacion_1(double , double , CLIENT *);
extern  calculadora_res * multiplicacion_1_svc(double , double , struct svc_req *);
#define DIVISION 4
extern  calculadora_res * division_1(double , double , CLIENT *);
extern  calculadora_res * division_1_svc(double , double , struct svc_req *);
#define SUMAVEC 5
extern  calculadora_res_vec * sumavec_1(vec , vec , CLIENT *);
extern  calculadora_res_vec * sumavec_1_svc(vec , vec , struct svc_req *);
#define RESTAVEC 6
extern  calculadora_res_vec * restavec_1(vec , vec , CLIENT *);
extern  calculadora_res_vec * restavec_1_svc(vec , vec , struct svc_req *);
#define MULTIPLICACIONVEC 7
extern  calculadora_res_vec * multiplicacionvec_1(vec , vec , CLIENT *);
extern  calculadora_res_vec * multiplicacionvec_1_svc(vec , vec , struct svc_req *);
#define MULTIPLICACIONVEC_ESC 8
extern  calculadora_res_vec * multiplicacionvec_esc_1(vec , double , CLIENT *);
extern  calculadora_res_vec * multiplicacionvec_esc_1_svc(vec , double , struct svc_req *);
#define POLINOMIO 9
extern  calculadora_res * polinomio_1(polinomio , CLIENT *);
extern  calculadora_res * polinomio_1_svc(polinomio , struct svc_req *);
extern int calcprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SUMA 1
extern  calculadora_res * suma_1();
extern  calculadora_res * suma_1_svc();
#define RESTA 2
extern  calculadora_res * resta_1();
extern  calculadora_res * resta_1_svc();
#define MULTIPLICACION 3
extern  calculadora_res * multiplicacion_1();
extern  calculadora_res * multiplicacion_1_svc();
#define DIVISION 4
extern  calculadora_res * division_1();
extern  calculadora_res * division_1_svc();
#define SUMAVEC 5
extern  calculadora_res_vec * sumavec_1();
extern  calculadora_res_vec * sumavec_1_svc();
#define RESTAVEC 6
extern  calculadora_res_vec * restavec_1();
extern  calculadora_res_vec * restavec_1_svc();
#define MULTIPLICACIONVEC 7
extern  calculadora_res_vec * multiplicacionvec_1();
extern  calculadora_res_vec * multiplicacionvec_1_svc();
#define MULTIPLICACIONVEC_ESC 8
extern  calculadora_res_vec * multiplicacionvec_esc_1();
extern  calculadora_res_vec * multiplicacionvec_esc_1_svc();
#define POLINOMIO 9
extern  calculadora_res * polinomio_1();
extern  calculadora_res * polinomio_1_svc();
extern int calcprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_vec (XDR *, vec*);
extern  bool_t xdr_polinomio (XDR *, polinomio*);
extern  bool_t xdr_operacion (XDR *, operacion*);
extern  bool_t xdr_calculadora_res (XDR *, calculadora_res*);
extern  bool_t xdr_calculadora_res_vec (XDR *, calculadora_res_vec*);
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_multiplicacion_1_argument (XDR *, multiplicacion_1_argument*);
extern  bool_t xdr_division_1_argument (XDR *, division_1_argument*);
extern  bool_t xdr_sumavec_1_argument (XDR *, sumavec_1_argument*);
extern  bool_t xdr_restavec_1_argument (XDR *, restavec_1_argument*);
extern  bool_t xdr_multiplicacionvec_1_argument (XDR *, multiplicacionvec_1_argument*);
extern  bool_t xdr_multiplicacionvec_esc_1_argument (XDR *, multiplicacionvec_esc_1_argument*);

#else /* K&R C */
extern bool_t xdr_vec ();
extern bool_t xdr_polinomio ();
extern bool_t xdr_operacion ();
extern bool_t xdr_calculadora_res ();
extern bool_t xdr_calculadora_res_vec ();
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_multiplicacion_1_argument ();
extern bool_t xdr_division_1_argument ();
extern bool_t xdr_sumavec_1_argument ();
extern bool_t xdr_restavec_1_argument ();
extern bool_t xdr_multiplicacionvec_1_argument ();
extern bool_t xdr_multiplicacionvec_esc_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CALCULADORA_H_RPCGEN */
