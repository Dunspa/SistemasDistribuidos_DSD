/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calculadora_H
#define Calculadora_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "calculadora_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalculadoraIf {
 public:
  virtual ~CalculadoraIf() {}
  virtual void ping() = 0;
  virtual double suma(const double num1, const double num2) = 0;
  virtual double resta(const double num1, const double num2) = 0;
  virtual double multiplicacion(const double num1, const double num2) = 0;
  virtual double division(const double num1, const double num2) = 0;
  virtual void sumavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) = 0;
  virtual void restavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) = 0;
  virtual void multiplicacionvec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) = 0;
  virtual void multiplicacionvec_esc(std::vector<double> & _return, const std::vector<double> & vec, const double num) = 0;
  virtual double polinomio(const std::vector<operacion> & polinomio) = 0;
};

class CalculadoraIfFactory {
 public:
  typedef CalculadoraIf Handler;

  virtual ~CalculadoraIfFactory() {}

  virtual CalculadoraIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalculadoraIf* /* handler */) = 0;
};

class CalculadoraIfSingletonFactory : virtual public CalculadoraIfFactory {
 public:
  CalculadoraIfSingletonFactory(const ::std::shared_ptr<CalculadoraIf>& iface) : iface_(iface) {}
  virtual ~CalculadoraIfSingletonFactory() {}

  virtual CalculadoraIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalculadoraIf* /* handler */) {}

 protected:
  ::std::shared_ptr<CalculadoraIf> iface_;
};

class CalculadoraNull : virtual public CalculadoraIf {
 public:
  virtual ~CalculadoraNull() {}
  void ping() {
    return;
  }
  double suma(const double /* num1 */, const double /* num2 */) {
    double _return = (double)0;
    return _return;
  }
  double resta(const double /* num1 */, const double /* num2 */) {
    double _return = (double)0;
    return _return;
  }
  double multiplicacion(const double /* num1 */, const double /* num2 */) {
    double _return = (double)0;
    return _return;
  }
  double division(const double /* num1 */, const double /* num2 */) {
    double _return = (double)0;
    return _return;
  }
  void sumavec(std::vector<double> & /* _return */, const std::vector<double> & /* vec1 */, const std::vector<double> & /* vec2 */) {
    return;
  }
  void restavec(std::vector<double> & /* _return */, const std::vector<double> & /* vec1 */, const std::vector<double> & /* vec2 */) {
    return;
  }
  void multiplicacionvec(std::vector<double> & /* _return */, const std::vector<double> & /* vec1 */, const std::vector<double> & /* vec2 */) {
    return;
  }
  void multiplicacionvec_esc(std::vector<double> & /* _return */, const std::vector<double> & /* vec */, const double /* num */) {
    return;
  }
  double polinomio(const std::vector<operacion> & /* polinomio */) {
    double _return = (double)0;
    return _return;
  }
};


class Calculadora_ping_args {
 public:

  Calculadora_ping_args(const Calculadora_ping_args&);
  Calculadora_ping_args& operator=(const Calculadora_ping_args&);
  Calculadora_ping_args() {
  }

  virtual ~Calculadora_ping_args() noexcept;

  bool operator == (const Calculadora_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculadora_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_ping_pargs {
 public:


  virtual ~Calculadora_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_ping_result {
 public:

  Calculadora_ping_result(const Calculadora_ping_result&);
  Calculadora_ping_result& operator=(const Calculadora_ping_result&);
  Calculadora_ping_result() {
  }

  virtual ~Calculadora_ping_result() noexcept;

  bool operator == (const Calculadora_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Calculadora_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_ping_presult {
 public:


  virtual ~Calculadora_ping_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_suma_args__isset {
  _Calculadora_suma_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _Calculadora_suma_args__isset;

class Calculadora_suma_args {
 public:

  Calculadora_suma_args(const Calculadora_suma_args&);
  Calculadora_suma_args& operator=(const Calculadora_suma_args&);
  Calculadora_suma_args() : num1(0), num2(0) {
  }

  virtual ~Calculadora_suma_args() noexcept;
  double num1;
  double num2;

  _Calculadora_suma_args__isset __isset;

  void __set_num1(const double val);

  void __set_num2(const double val);

  bool operator == (const Calculadora_suma_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_suma_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_suma_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_suma_pargs {
 public:


  virtual ~Calculadora_suma_pargs() noexcept;
  const double* num1;
  const double* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_suma_result__isset {
  _Calculadora_suma_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_suma_result__isset;

class Calculadora_suma_result {
 public:

  Calculadora_suma_result(const Calculadora_suma_result&);
  Calculadora_suma_result& operator=(const Calculadora_suma_result&);
  Calculadora_suma_result() : success(0) {
  }

  virtual ~Calculadora_suma_result() noexcept;
  double success;

  _Calculadora_suma_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_suma_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_suma_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_suma_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_suma_presult__isset {
  _Calculadora_suma_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_suma_presult__isset;

class Calculadora_suma_presult {
 public:


  virtual ~Calculadora_suma_presult() noexcept;
  double* success;

  _Calculadora_suma_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_resta_args__isset {
  _Calculadora_resta_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _Calculadora_resta_args__isset;

class Calculadora_resta_args {
 public:

  Calculadora_resta_args(const Calculadora_resta_args&);
  Calculadora_resta_args& operator=(const Calculadora_resta_args&);
  Calculadora_resta_args() : num1(0), num2(0) {
  }

  virtual ~Calculadora_resta_args() noexcept;
  double num1;
  double num2;

  _Calculadora_resta_args__isset __isset;

  void __set_num1(const double val);

  void __set_num2(const double val);

  bool operator == (const Calculadora_resta_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_resta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_resta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_resta_pargs {
 public:


  virtual ~Calculadora_resta_pargs() noexcept;
  const double* num1;
  const double* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_resta_result__isset {
  _Calculadora_resta_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_resta_result__isset;

class Calculadora_resta_result {
 public:

  Calculadora_resta_result(const Calculadora_resta_result&);
  Calculadora_resta_result& operator=(const Calculadora_resta_result&);
  Calculadora_resta_result() : success(0) {
  }

  virtual ~Calculadora_resta_result() noexcept;
  double success;

  _Calculadora_resta_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_resta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_resta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_resta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_resta_presult__isset {
  _Calculadora_resta_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_resta_presult__isset;

class Calculadora_resta_presult {
 public:


  virtual ~Calculadora_resta_presult() noexcept;
  double* success;

  _Calculadora_resta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_multiplicacion_args__isset {
  _Calculadora_multiplicacion_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _Calculadora_multiplicacion_args__isset;

class Calculadora_multiplicacion_args {
 public:

  Calculadora_multiplicacion_args(const Calculadora_multiplicacion_args&);
  Calculadora_multiplicacion_args& operator=(const Calculadora_multiplicacion_args&);
  Calculadora_multiplicacion_args() : num1(0), num2(0) {
  }

  virtual ~Calculadora_multiplicacion_args() noexcept;
  double num1;
  double num2;

  _Calculadora_multiplicacion_args__isset __isset;

  void __set_num1(const double val);

  void __set_num2(const double val);

  bool operator == (const Calculadora_multiplicacion_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_multiplicacion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_multiplicacion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_multiplicacion_pargs {
 public:


  virtual ~Calculadora_multiplicacion_pargs() noexcept;
  const double* num1;
  const double* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_multiplicacion_result__isset {
  _Calculadora_multiplicacion_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_multiplicacion_result__isset;

class Calculadora_multiplicacion_result {
 public:

  Calculadora_multiplicacion_result(const Calculadora_multiplicacion_result&);
  Calculadora_multiplicacion_result& operator=(const Calculadora_multiplicacion_result&);
  Calculadora_multiplicacion_result() : success(0) {
  }

  virtual ~Calculadora_multiplicacion_result() noexcept;
  double success;

  _Calculadora_multiplicacion_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_multiplicacion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_multiplicacion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_multiplicacion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_multiplicacion_presult__isset {
  _Calculadora_multiplicacion_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_multiplicacion_presult__isset;

class Calculadora_multiplicacion_presult {
 public:


  virtual ~Calculadora_multiplicacion_presult() noexcept;
  double* success;

  _Calculadora_multiplicacion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_division_args__isset {
  _Calculadora_division_args__isset() : num1(false), num2(false) {}
  bool num1 :1;
  bool num2 :1;
} _Calculadora_division_args__isset;

class Calculadora_division_args {
 public:

  Calculadora_division_args(const Calculadora_division_args&);
  Calculadora_division_args& operator=(const Calculadora_division_args&);
  Calculadora_division_args() : num1(0), num2(0) {
  }

  virtual ~Calculadora_division_args() noexcept;
  double num1;
  double num2;

  _Calculadora_division_args__isset __isset;

  void __set_num1(const double val);

  void __set_num2(const double val);

  bool operator == (const Calculadora_division_args & rhs) const
  {
    if (!(num1 == rhs.num1))
      return false;
    if (!(num2 == rhs.num2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_division_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_division_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_division_pargs {
 public:


  virtual ~Calculadora_division_pargs() noexcept;
  const double* num1;
  const double* num2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_division_result__isset {
  _Calculadora_division_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_division_result__isset;

class Calculadora_division_result {
 public:

  Calculadora_division_result(const Calculadora_division_result&);
  Calculadora_division_result& operator=(const Calculadora_division_result&);
  Calculadora_division_result() : success(0) {
  }

  virtual ~Calculadora_division_result() noexcept;
  double success;

  _Calculadora_division_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_division_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_division_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_division_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_division_presult__isset {
  _Calculadora_division_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_division_presult__isset;

class Calculadora_division_presult {
 public:


  virtual ~Calculadora_division_presult() noexcept;
  double* success;

  _Calculadora_division_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_sumavec_args__isset {
  _Calculadora_sumavec_args__isset() : vec1(false), vec2(false) {}
  bool vec1 :1;
  bool vec2 :1;
} _Calculadora_sumavec_args__isset;

class Calculadora_sumavec_args {
 public:

  Calculadora_sumavec_args(const Calculadora_sumavec_args&);
  Calculadora_sumavec_args& operator=(const Calculadora_sumavec_args&);
  Calculadora_sumavec_args() {
  }

  virtual ~Calculadora_sumavec_args() noexcept;
  std::vector<double>  vec1;
  std::vector<double>  vec2;

  _Calculadora_sumavec_args__isset __isset;

  void __set_vec1(const std::vector<double> & val);

  void __set_vec2(const std::vector<double> & val);

  bool operator == (const Calculadora_sumavec_args & rhs) const
  {
    if (!(vec1 == rhs.vec1))
      return false;
    if (!(vec2 == rhs.vec2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_sumavec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_sumavec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_sumavec_pargs {
 public:


  virtual ~Calculadora_sumavec_pargs() noexcept;
  const std::vector<double> * vec1;
  const std::vector<double> * vec2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_sumavec_result__isset {
  _Calculadora_sumavec_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_sumavec_result__isset;

class Calculadora_sumavec_result {
 public:

  Calculadora_sumavec_result(const Calculadora_sumavec_result&);
  Calculadora_sumavec_result& operator=(const Calculadora_sumavec_result&);
  Calculadora_sumavec_result() {
  }

  virtual ~Calculadora_sumavec_result() noexcept;
  std::vector<double>  success;

  _Calculadora_sumavec_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const Calculadora_sumavec_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_sumavec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_sumavec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_sumavec_presult__isset {
  _Calculadora_sumavec_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_sumavec_presult__isset;

class Calculadora_sumavec_presult {
 public:


  virtual ~Calculadora_sumavec_presult() noexcept;
  std::vector<double> * success;

  _Calculadora_sumavec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_restavec_args__isset {
  _Calculadora_restavec_args__isset() : vec1(false), vec2(false) {}
  bool vec1 :1;
  bool vec2 :1;
} _Calculadora_restavec_args__isset;

class Calculadora_restavec_args {
 public:

  Calculadora_restavec_args(const Calculadora_restavec_args&);
  Calculadora_restavec_args& operator=(const Calculadora_restavec_args&);
  Calculadora_restavec_args() {
  }

  virtual ~Calculadora_restavec_args() noexcept;
  std::vector<double>  vec1;
  std::vector<double>  vec2;

  _Calculadora_restavec_args__isset __isset;

  void __set_vec1(const std::vector<double> & val);

  void __set_vec2(const std::vector<double> & val);

  bool operator == (const Calculadora_restavec_args & rhs) const
  {
    if (!(vec1 == rhs.vec1))
      return false;
    if (!(vec2 == rhs.vec2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_restavec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_restavec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_restavec_pargs {
 public:


  virtual ~Calculadora_restavec_pargs() noexcept;
  const std::vector<double> * vec1;
  const std::vector<double> * vec2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_restavec_result__isset {
  _Calculadora_restavec_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_restavec_result__isset;

class Calculadora_restavec_result {
 public:

  Calculadora_restavec_result(const Calculadora_restavec_result&);
  Calculadora_restavec_result& operator=(const Calculadora_restavec_result&);
  Calculadora_restavec_result() {
  }

  virtual ~Calculadora_restavec_result() noexcept;
  std::vector<double>  success;

  _Calculadora_restavec_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const Calculadora_restavec_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_restavec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_restavec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_restavec_presult__isset {
  _Calculadora_restavec_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_restavec_presult__isset;

class Calculadora_restavec_presult {
 public:


  virtual ~Calculadora_restavec_presult() noexcept;
  std::vector<double> * success;

  _Calculadora_restavec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_multiplicacionvec_args__isset {
  _Calculadora_multiplicacionvec_args__isset() : vec1(false), vec2(false) {}
  bool vec1 :1;
  bool vec2 :1;
} _Calculadora_multiplicacionvec_args__isset;

class Calculadora_multiplicacionvec_args {
 public:

  Calculadora_multiplicacionvec_args(const Calculadora_multiplicacionvec_args&);
  Calculadora_multiplicacionvec_args& operator=(const Calculadora_multiplicacionvec_args&);
  Calculadora_multiplicacionvec_args() {
  }

  virtual ~Calculadora_multiplicacionvec_args() noexcept;
  std::vector<double>  vec1;
  std::vector<double>  vec2;

  _Calculadora_multiplicacionvec_args__isset __isset;

  void __set_vec1(const std::vector<double> & val);

  void __set_vec2(const std::vector<double> & val);

  bool operator == (const Calculadora_multiplicacionvec_args & rhs) const
  {
    if (!(vec1 == rhs.vec1))
      return false;
    if (!(vec2 == rhs.vec2))
      return false;
    return true;
  }
  bool operator != (const Calculadora_multiplicacionvec_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_multiplicacionvec_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_multiplicacionvec_pargs {
 public:


  virtual ~Calculadora_multiplicacionvec_pargs() noexcept;
  const std::vector<double> * vec1;
  const std::vector<double> * vec2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_multiplicacionvec_result__isset {
  _Calculadora_multiplicacionvec_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_multiplicacionvec_result__isset;

class Calculadora_multiplicacionvec_result {
 public:

  Calculadora_multiplicacionvec_result(const Calculadora_multiplicacionvec_result&);
  Calculadora_multiplicacionvec_result& operator=(const Calculadora_multiplicacionvec_result&);
  Calculadora_multiplicacionvec_result() {
  }

  virtual ~Calculadora_multiplicacionvec_result() noexcept;
  std::vector<double>  success;

  _Calculadora_multiplicacionvec_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const Calculadora_multiplicacionvec_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_multiplicacionvec_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_multiplicacionvec_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_multiplicacionvec_presult__isset {
  _Calculadora_multiplicacionvec_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_multiplicacionvec_presult__isset;

class Calculadora_multiplicacionvec_presult {
 public:


  virtual ~Calculadora_multiplicacionvec_presult() noexcept;
  std::vector<double> * success;

  _Calculadora_multiplicacionvec_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_multiplicacionvec_esc_args__isset {
  _Calculadora_multiplicacionvec_esc_args__isset() : vec(false), num(false) {}
  bool vec :1;
  bool num :1;
} _Calculadora_multiplicacionvec_esc_args__isset;

class Calculadora_multiplicacionvec_esc_args {
 public:

  Calculadora_multiplicacionvec_esc_args(const Calculadora_multiplicacionvec_esc_args&);
  Calculadora_multiplicacionvec_esc_args& operator=(const Calculadora_multiplicacionvec_esc_args&);
  Calculadora_multiplicacionvec_esc_args() : num(0) {
  }

  virtual ~Calculadora_multiplicacionvec_esc_args() noexcept;
  std::vector<double>  vec;
  double num;

  _Calculadora_multiplicacionvec_esc_args__isset __isset;

  void __set_vec(const std::vector<double> & val);

  void __set_num(const double val);

  bool operator == (const Calculadora_multiplicacionvec_esc_args & rhs) const
  {
    if (!(vec == rhs.vec))
      return false;
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const Calculadora_multiplicacionvec_esc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_multiplicacionvec_esc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_multiplicacionvec_esc_pargs {
 public:


  virtual ~Calculadora_multiplicacionvec_esc_pargs() noexcept;
  const std::vector<double> * vec;
  const double* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_multiplicacionvec_esc_result__isset {
  _Calculadora_multiplicacionvec_esc_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_multiplicacionvec_esc_result__isset;

class Calculadora_multiplicacionvec_esc_result {
 public:

  Calculadora_multiplicacionvec_esc_result(const Calculadora_multiplicacionvec_esc_result&);
  Calculadora_multiplicacionvec_esc_result& operator=(const Calculadora_multiplicacionvec_esc_result&);
  Calculadora_multiplicacionvec_esc_result() {
  }

  virtual ~Calculadora_multiplicacionvec_esc_result() noexcept;
  std::vector<double>  success;

  _Calculadora_multiplicacionvec_esc_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const Calculadora_multiplicacionvec_esc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_multiplicacionvec_esc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_multiplicacionvec_esc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_multiplicacionvec_esc_presult__isset {
  _Calculadora_multiplicacionvec_esc_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_multiplicacionvec_esc_presult__isset;

class Calculadora_multiplicacionvec_esc_presult {
 public:


  virtual ~Calculadora_multiplicacionvec_esc_presult() noexcept;
  std::vector<double> * success;

  _Calculadora_multiplicacionvec_esc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Calculadora_polinomio_args__isset {
  _Calculadora_polinomio_args__isset() : polinomio(false) {}
  bool polinomio :1;
} _Calculadora_polinomio_args__isset;

class Calculadora_polinomio_args {
 public:

  Calculadora_polinomio_args(const Calculadora_polinomio_args&);
  Calculadora_polinomio_args& operator=(const Calculadora_polinomio_args&);
  Calculadora_polinomio_args() {
  }

  virtual ~Calculadora_polinomio_args() noexcept;
  std::vector<operacion>  polinomio;

  _Calculadora_polinomio_args__isset __isset;

  void __set_polinomio(const std::vector<operacion> & val);

  bool operator == (const Calculadora_polinomio_args & rhs) const
  {
    if (!(polinomio == rhs.polinomio))
      return false;
    return true;
  }
  bool operator != (const Calculadora_polinomio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_polinomio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calculadora_polinomio_pargs {
 public:


  virtual ~Calculadora_polinomio_pargs() noexcept;
  const std::vector<operacion> * polinomio;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_polinomio_result__isset {
  _Calculadora_polinomio_result__isset() : success(false) {}
  bool success :1;
} _Calculadora_polinomio_result__isset;

class Calculadora_polinomio_result {
 public:

  Calculadora_polinomio_result(const Calculadora_polinomio_result&);
  Calculadora_polinomio_result& operator=(const Calculadora_polinomio_result&);
  Calculadora_polinomio_result() : success(0) {
  }

  virtual ~Calculadora_polinomio_result() noexcept;
  double success;

  _Calculadora_polinomio_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const Calculadora_polinomio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calculadora_polinomio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calculadora_polinomio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calculadora_polinomio_presult__isset {
  _Calculadora_polinomio_presult__isset() : success(false) {}
  bool success :1;
} _Calculadora_polinomio_presult__isset;

class Calculadora_polinomio_presult {
 public:


  virtual ~Calculadora_polinomio_presult() noexcept;
  double* success;

  _Calculadora_polinomio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalculadoraClient : virtual public CalculadoraIf {
 public:
  CalculadoraClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalculadoraClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  double suma(const double num1, const double num2);
  void send_suma(const double num1, const double num2);
  double recv_suma();
  double resta(const double num1, const double num2);
  void send_resta(const double num1, const double num2);
  double recv_resta();
  double multiplicacion(const double num1, const double num2);
  void send_multiplicacion(const double num1, const double num2);
  double recv_multiplicacion();
  double division(const double num1, const double num2);
  void send_division(const double num1, const double num2);
  double recv_division();
  void sumavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2);
  void send_sumavec(const std::vector<double> & vec1, const std::vector<double> & vec2);
  void recv_sumavec(std::vector<double> & _return);
  void restavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2);
  void send_restavec(const std::vector<double> & vec1, const std::vector<double> & vec2);
  void recv_restavec(std::vector<double> & _return);
  void multiplicacionvec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2);
  void send_multiplicacionvec(const std::vector<double> & vec1, const std::vector<double> & vec2);
  void recv_multiplicacionvec(std::vector<double> & _return);
  void multiplicacionvec_esc(std::vector<double> & _return, const std::vector<double> & vec, const double num);
  void send_multiplicacionvec_esc(const std::vector<double> & vec, const double num);
  void recv_multiplicacionvec_esc(std::vector<double> & _return);
  double polinomio(const std::vector<operacion> & polinomio);
  void send_polinomio(const std::vector<operacion> & polinomio);
  double recv_polinomio();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalculadoraProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<CalculadoraIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalculadoraProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_suma(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiplicacion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_division(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sumavec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_restavec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiplicacionvec(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiplicacionvec_esc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_polinomio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalculadoraProcessor(::std::shared_ptr<CalculadoraIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &CalculadoraProcessor::process_ping;
    processMap_["suma"] = &CalculadoraProcessor::process_suma;
    processMap_["resta"] = &CalculadoraProcessor::process_resta;
    processMap_["multiplicacion"] = &CalculadoraProcessor::process_multiplicacion;
    processMap_["division"] = &CalculadoraProcessor::process_division;
    processMap_["sumavec"] = &CalculadoraProcessor::process_sumavec;
    processMap_["restavec"] = &CalculadoraProcessor::process_restavec;
    processMap_["multiplicacionvec"] = &CalculadoraProcessor::process_multiplicacionvec;
    processMap_["multiplicacionvec_esc"] = &CalculadoraProcessor::process_multiplicacionvec_esc;
    processMap_["polinomio"] = &CalculadoraProcessor::process_polinomio;
  }

  virtual ~CalculadoraProcessor() {}
};

class CalculadoraProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalculadoraProcessorFactory(const ::std::shared_ptr< CalculadoraIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< CalculadoraIfFactory > handlerFactory_;
};

class CalculadoraMultiface : virtual public CalculadoraIf {
 public:
  CalculadoraMultiface(std::vector<std::shared_ptr<CalculadoraIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalculadoraMultiface() {}
 protected:
  std::vector<std::shared_ptr<CalculadoraIf> > ifaces_;
  CalculadoraMultiface() {}
  void add(::std::shared_ptr<CalculadoraIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  double suma(const double num1, const double num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->suma(num1, num2);
    }
    return ifaces_[i]->suma(num1, num2);
  }

  double resta(const double num1, const double num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resta(num1, num2);
    }
    return ifaces_[i]->resta(num1, num2);
  }

  double multiplicacion(const double num1, const double num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiplicacion(num1, num2);
    }
    return ifaces_[i]->multiplicacion(num1, num2);
  }

  double division(const double num1, const double num2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->division(num1, num2);
    }
    return ifaces_[i]->division(num1, num2);
  }

  void sumavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sumavec(_return, vec1, vec2);
    }
    ifaces_[i]->sumavec(_return, vec1, vec2);
    return;
  }

  void restavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->restavec(_return, vec1, vec2);
    }
    ifaces_[i]->restavec(_return, vec1, vec2);
    return;
  }

  void multiplicacionvec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiplicacionvec(_return, vec1, vec2);
    }
    ifaces_[i]->multiplicacionvec(_return, vec1, vec2);
    return;
  }

  void multiplicacionvec_esc(std::vector<double> & _return, const std::vector<double> & vec, const double num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiplicacionvec_esc(_return, vec, num);
    }
    ifaces_[i]->multiplicacionvec_esc(_return, vec, num);
    return;
  }

  double polinomio(const std::vector<operacion> & polinomio) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->polinomio(polinomio);
    }
    return ifaces_[i]->polinomio(polinomio);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalculadoraConcurrentClient : virtual public CalculadoraIf {
 public:
  CalculadoraConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  CalculadoraConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  double suma(const double num1, const double num2);
  int32_t send_suma(const double num1, const double num2);
  double recv_suma(const int32_t seqid);
  double resta(const double num1, const double num2);
  int32_t send_resta(const double num1, const double num2);
  double recv_resta(const int32_t seqid);
  double multiplicacion(const double num1, const double num2);
  int32_t send_multiplicacion(const double num1, const double num2);
  double recv_multiplicacion(const int32_t seqid);
  double division(const double num1, const double num2);
  int32_t send_division(const double num1, const double num2);
  double recv_division(const int32_t seqid);
  void sumavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2);
  int32_t send_sumavec(const std::vector<double> & vec1, const std::vector<double> & vec2);
  void recv_sumavec(std::vector<double> & _return, const int32_t seqid);
  void restavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2);
  int32_t send_restavec(const std::vector<double> & vec1, const std::vector<double> & vec2);
  void recv_restavec(std::vector<double> & _return, const int32_t seqid);
  void multiplicacionvec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2);
  int32_t send_multiplicacionvec(const std::vector<double> & vec1, const std::vector<double> & vec2);
  void recv_multiplicacionvec(std::vector<double> & _return, const int32_t seqid);
  void multiplicacionvec_esc(std::vector<double> & _return, const std::vector<double> & vec, const double num);
  int32_t send_multiplicacionvec_esc(const std::vector<double> & vec, const double num);
  void recv_multiplicacionvec_esc(std::vector<double> & _return, const int32_t seqid);
  double polinomio(const std::vector<operacion> & polinomio);
  int32_t send_polinomio(const std::vector<operacion> & polinomio);
  double recv_polinomio(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
