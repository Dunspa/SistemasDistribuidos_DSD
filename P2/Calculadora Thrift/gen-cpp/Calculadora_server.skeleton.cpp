// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Calculadora.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class CalculadoraHandler : virtual public CalculadoraIf {
 public:
  CalculadoraHandler() {
    // Your initialization goes here
  }

  void ping() {
    // Your implementation goes here
    printf("ping\n");
  }

  double suma(const double num1, const double num2) {
    // Your implementation goes here
    printf("suma\n");
  }

  double resta(const double num1, const double num2) {
    // Your implementation goes here
    printf("resta\n");
  }

  double multiplicacion(const double num1, const double num2) {
    // Your implementation goes here
    printf("multiplicacion\n");
  }

  double division(const double num1, const double num2) {
    // Your implementation goes here
    printf("division\n");
  }

  void sumavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) {
    // Your implementation goes here
    printf("sumavec\n");
  }

  void restavec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) {
    // Your implementation goes here
    printf("restavec\n");
  }

  void multiplicacionvec(std::vector<double> & _return, const std::vector<double> & vec1, const std::vector<double> & vec2) {
    // Your implementation goes here
    printf("multiplicacionvec\n");
  }

  void multiplicacionvec_esc(std::vector<double> & _return, const std::vector<double> & vec, const double num) {
    // Your implementation goes here
    printf("multiplicacionvec_esc\n");
  }

  double polinomio(const std::vector<operacion> & polinomio) {
    // Your implementation goes here
    printf("polinomio\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<CalculadoraHandler> handler(new CalculadoraHandler());
  ::std::shared_ptr<TProcessor> processor(new CalculadoraProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

