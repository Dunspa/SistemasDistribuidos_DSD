/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "calculadora_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




operacion::~operacion() noexcept {
}


void operacion::__set_val(const double val) {
  this->val = val;
}

void operacion::__set_op_izq(const std::string& val) {
  this->op_izq = val;
}

void operacion::__set_op_dcha(const std::string& val) {
  this->op_dcha = val;
}
std::ostream& operator<<(std::ostream& out, const operacion& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t operacion::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_val = false;
  bool isset_op_izq = false;
  bool isset_op_dcha = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->val);
          isset_val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->op_izq);
          isset_op_izq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->op_dcha);
          isset_op_dcha = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_val)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op_izq)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_op_dcha)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t operacion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("operacion");

  xfer += oprot->writeFieldBegin("val", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->val);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_izq", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->op_izq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("op_dcha", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->op_dcha);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(operacion &a, operacion &b) {
  using ::std::swap;
  swap(a.val, b.val);
  swap(a.op_izq, b.op_izq);
  swap(a.op_dcha, b.op_dcha);
}

operacion::operacion(const operacion& other0) {
  val = other0.val;
  op_izq = other0.op_izq;
  op_dcha = other0.op_dcha;
}
operacion& operacion::operator=(const operacion& other1) {
  val = other1.val;
  op_izq = other1.op_izq;
  op_dcha = other1.op_dcha;
  return *this;
}
void operacion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "operacion(";
  out << "val=" << to_string(val);
  out << ", " << "op_izq=" << to_string(op_izq);
  out << ", " << "op_dcha=" << to_string(op_dcha);
  out << ")";
}


