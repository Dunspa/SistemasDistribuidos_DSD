/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef calculadora_TYPES_H
#define calculadora_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class operacion;


class operacion : public virtual ::apache::thrift::TBase {
 public:

  operacion(const operacion&);
  operacion& operator=(const operacion&);
  operacion() : val(0), op_izq(), op_dcha() {
  }

  virtual ~operacion() noexcept;
  double val;
  std::string op_izq;
  std::string op_dcha;

  void __set_val(const double val);

  void __set_op_izq(const std::string& val);

  void __set_op_dcha(const std::string& val);

  bool operator == (const operacion & rhs) const
  {
    if (!(val == rhs.val))
      return false;
    if (!(op_izq == rhs.op_izq))
      return false;
    if (!(op_dcha == rhs.op_dcha))
      return false;
    return true;
  }
  bool operator != (const operacion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const operacion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(operacion &a, operacion &b);

std::ostream& operator<<(std::ostream& out, const operacion& obj);



#endif
